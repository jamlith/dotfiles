# BASH AUTOEXEC SCRIPT, MODDED FOR THE BASH CONSOLE IN WINDOWS.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples
# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac


export DEV="/mnt/c/Users/jamli/dev";		# REDIRECT ALL REQUESTS FOR HOME TO THE USER HOME IN WINDOWS FILESYSTEM
export LOME="/home/james";					# $LOME will pointo the users home directory on the linux filesystem
export HOME="/mnt/c/Users/jamli"; # Changed the target of $HOME, ~ should now expand to the windows dir.  The old directory is full of settings and other files that programs will be looking for in the wrong place.  If this becomes an issue, copy the hidden dirs from $LOME to ~.


export EDITOR="${VISUAL:=vim}";		# Set vim to the default cli text editor.
export VISUAL=$EDITOR;						# Covering all the bases.
export WAN="$([[ $(curl --silent whatismyip.akamai.com) =~ ^([0-9]{1,3}([.][0-9]{1,3}){3})$ ]] && echo ${BASH_REMATCH[1]} || echo 'wan_err')";       # Always valid
export HIP="$(cat ~/.bin/.hip)"
export LAN="$([[ $(ifconfig | grep -e "wifi0" -A1) =~ inet\ addr\:([0-9]{1,3}(.[0-9]{1,3}){3}) ]] && echo ${BASH_REMATCH[1]} || echo 'lan_err'))";   # Only valid on the laptop in windows.
export P5Q="192.168.1.2";       # LAN address for the desktop.


alias SSH="ssh $P5Q"

red="\e[00;31m"; grn="\e[00;32m"; ylw="\e[00;33m"; blu="\e[00;34m"; pur="\e[00;35m"; cyn="\e[00;36m"; wht="\e[00;37m"; r="\e[00m"; R="$r\n"
lred="\e[00;91m"; lgrn="\e[00;92m";l ylw="\e[00933m"; lblu="\e[00;94m"; lpur="\e[00;95m"; lcyn="\e[00;96m"; lwht="\e[00;97m"
gry="\e[00;37;02;03m"; gld="\e[00;33;03m"; blk="\e[00;30m"; itl="\e[03m"; bld="\e[01m"; uln="\e[04m"; inv="\e[07m";

printf "${blu}Custom vars:"
printf "    ${lred}\$${wht}DEV, ${lred}\$${wht}LOME, ${lred}\$${wht}HOME, ${lred}\$${wht}WAN, ${lred}\$${wht}LAN...$R"

refresh_hip()
{
	[[ $WAN =~ ^([0-9]{1,3}([.][0-9]{1,3}){3})$ ]] && echo "$WAN" > ~/.bin/.hip
}


if [[ $WAN != $HIP ]] ; then
    if [[ $LAN =~ 10[.]0[.]0[.][0-9]{1,3} ]] ; then
        printf "\n${red}[ ${cyn}${bld}WAN IP${wht} has $lred${itl}CHANGED! ${red}]\n  ${lblu}${bld}Update it? ${lred}[${pur}${bld}Y${wht}/n${lred}]$r"
        read cf
        if [[ cf =~ ^[Yy]?$ ]] ; then
            unset cf
            refresh_hip
        fi
        unset cf
    else
        printf "\n${red}[ ${cyn}${bld}WAN IP${wht} has $lred${itl}CHANGED! ${red}]\n  ${wht}Run${lred} refresh_hip${wht} to update it.$R"
    fi
fi



prompt_yn()
{
    if [[ $# -gt 1 ]] ; then
        local default="y"
        local msg=""
        while $# -gt 0; do
            arg=$1; shift
            if [[ $arg =~ ^[YyNn]$ ]] ; then
                default=$arg
            else
                msg="$arg $msg"
            fi
        done
    elif [[ $# -eq 1 ]] ; then
        local msg="$*"
        local default="n"
    else
        local msg="Continue?"
        local default="y"
    fi

    printf "${blu}${itl}$msg${wht} ${red}[${wht}$([[ $default =~ $[yY]^ ]] && echo 'Y/n' || echo 'y/N')${red}]${wht} "; read xit
    if [[ $xit =~ ^[Yy]?$ ]] && [[ $default =~ ^[yY]$ ]] || [[ $xit =~ ^[Nn]?$ ]] && [[ $default =~ ^[Nn]$ ]] ; then
        # Answer was yes
        printf "continue"
    else
        # Actions to take if answer was no...
        printf "return 1..."lllkklkl
        return 1;
    fi
}

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
    HISTCONTROL=ignoreboth
# append to the history file, don't overwrite it
    shopt -s histappend
# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
    HISTSIZE=1000
    HISTFILESIZE=2000
# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
    shopt -s checkwinsize
# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
    shopt -s globstar
# make less more friendly for non-text input files, see lesspipe(1)
    [ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"
# COLOR PROMPT
	PS1='\[\e[00;31m\][\[\e[00m\]\u@\h\[\e[00;94m\] \w\[\e[00;31m\]]\$\[\e[00m\] '
	#PS1='${debian_chroot:+($debian_chroot}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '


if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi
# colored GCC warnings and errors
    export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'
# some more ls aliases
    alias ll='ls -alF'
    alias la='ls -A'
    alias l='ls -CF'
# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
    alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'
# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.
    if [ -f ~/.bash_aliases ]; then
        . ~/.bash_aliases
    fi
# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
    if ! shopt -oq posix; then
        if [ -f /usr/share/bash-completion/bash_completion ]; then
            . /usr/share/bash-completion/bash_completion
        elif [ -f /etc/bash_completion ]; then
            . /etc/bash_completion
        fi
    fi

